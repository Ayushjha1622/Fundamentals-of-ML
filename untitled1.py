# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qn47YG_IJFKWxabXIoefq4mZvrECvnMI
"""

print("hello")

a=10
b=12
c=a+b
print(c)

import numpy as np

x=int(input("enter your number"))
y=int(input("enter your number"))
c = x+y
print(c)

x=np.array([[1],[2],[6]])
print(x)

x.shape

#vector addition
y=np.array([[1],[7],[8]])
sum=x+y
sum

np.add(x,y)

# scalar multiplication
alpha = 2
alpha *= x

np.multiply(alpha,x)

#linear combinations of vectors
a,b = 2,3
x,y = np.array([[2],[3]]),np.array([[5],[9]])
comb=a*x+b*y
comb

# vector - vector multiplication:- dot product
x,y = np.array([[-2],[2],]),np.array([[7],[8],])
dot = x.T @ y
dot

#euclidean norm l2 norm
#used for distance problem
x=np.array([[3],[6]])
np.linalg.norm(x,2)

#Manhattan norm l1 norm
x=np.array([[3],[-4]])
np.linalg.norm(x,1)

#Max norm infinity norm
x=np.array([[3],[-4]])
np.linalg.norm(x,np.inf)

#distance
x,y = np.array([[-2],[2]]),np.array([[4],[-3]])
distance = np.linalg.norm(x-y,2)
distance



#vector angles and orthogonality
x,y = np.array([[1],[2]]),np.array([[5],[7]])
cos_theta = (x.T @ y)/ (np.linalg.norm(x,2)*np.linalg.norm(y,2))
cos_theta

np.round(cos_theta,3)

cos_inv = np.arccos(cos_theta)
cos_inv

#convert from radian to degree
degree = cos_inv*((180)/np.pi)
degree

np.degrees(cos_inv)

#System of linear equations
# x + 2y = 8
# 5x - 3y = 1

#Matrix representation
A=np.array([[0,2], # 1st row
 [1,4]]) # 2nd row
A.shape

B=np.array([[0,2],[1,4]])
print(B)

A+B

np.add(A,B)

alpha=2
alpha*A

#matrix-vector multiplication
A @ x

np.dot(A,x)

A@B

